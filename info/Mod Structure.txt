
For version 0.5

/lua/ge/extensions/*
	PowerUps.lua
		Entrypoint for the client side. It loads and unloads everything relevant for this mod and depending on if its a multiplayer session or not auto load locations and the "open" powerup set if its available for the map the player has loaded into.
		
	ServerSide.lua
		Entrypoint for the server side. All the contents of this "extensions" directory work client and server side. Copying this entire directory into a server will automatically load this mod as a server plugin.
		
		/libs/*
			CollisionsLib.lua
				A so far unused library usable to detect "new" collisions between two vehicles.
			
			ForceField.lua
				Library that creates a highly customizable, radius based force field around any given vehicle. Where as highly customizable means that it works based on callbacks with defaults.
				
			Log.lua
				Logging utility that also displays what threw the log as filename@luafunction:linenumber.
				Log.info("this is my log", nil/"name of this log", nil/true/false)
				If the 3rd arg is given it also prints a stack trace that shows the calling order. Which is just usefull to debug what called this function and what called that.
				eg.
				MyFile@MyFunction:linenumber
				 ^ AnotherFile@MyOtherFunction:linenumber
				 ^ etc
				
			MathUtil.lua
				Mostly covers things like "hey tell me how many cars are in this space", "hey rotate this vector for me", "hey check along this line if there have been vehicles". aka "the tedious math stuff"
				
			ObjectWrapper.lua
				Wraps around the game own createObject function and safe guards otherwise game crashing object interactions
				
			ObjectWrapperCleaner.lua
				Keeps track of all objects that have ever been created with the ObjectWrapper. Automatically deletes these objects on mod reload or map unload.
			
			Particles.lua
				A "set and forget" wrapper for the game own particle emitter
				
			Placeables.lua
				Focuses on allowing powerups to place interactive and dynamic objects in the world that have custom logic attached to them.
				
			Pot.lua
				A simple probability based class that allows you to add any kind of an item to a "pot" with X many tickets, to then stir that pot and be "surprised" by what it picks.
			
			PowerUps.lua
				The core of this entire mod. Essentially only provides a definition, trait, sync and event system for powerups to use.
			
			PowerUpsExtender.lua
				Provides functions for vehicle and powerup interaction, mostly for the trait system. And a default powerup renderer.
			
			Sets.lua
				A wrapper for the TimedTriggers.lua library. Pretty powerfull library in my mind that isnt much used yet. Essentially makes it possible to create sets of triggers that can be executed at any time along side various conditions.
				
			Sfx.lua
				A "set and forget" wrapper for the game own sfx emitter
				
			Sounds.lua
				A library dedicated to play sounds in and around of vehicles and that can smartly choose to play them in the general environment, in the vehicle or as a sfx emitter depending on the distance between the vehicle and the spectator camera.

			TimedTriggers.lua
				Is a library that can run in VE, GE and on the BeamMP lua server.
				Its essentially a high performance job library that allows queing rudimentary tasks and time sensitive executions.
			
			TriggerLoad.lua
				Think of the game own prefab loader, but dedicated to lua triggers only. Is a bare bones library.
			
			Util.lua
				Think of additional table functions, a better math.random etc
			
			/extender/*
				Defaults.lua
					Provides default methods for powerups, such as default powerup renderers.
					
				GroupReturns.lua
					Defines the powerup group return enums
					
				Hotkeys.lua
					Defines all hotkeys that can be passed to a powerup
				
				PowerupReturns.lua
					Defines the active powerup return enums
				
				Traits.lua
					Defines the traits
					
				Types.lua
					Defines powerup group types
				
				Ui.lua
					Provides methods for displaying information the players UI, all depending on what vehicle the player is spectating
				
		/mp_libs/*
			colors.lua
				Essentially a converter to display beammp chat color codes colored for a CUI (eg a beammp server cui)
				
			CompileLua.lua
				Adds a server only wrapper for luas load() mechanism. DISABLED at the moment.
			
			MPClientRuntime.lua
				Handles the multiplayer communication between the client and server from the client side.
				
			MPServerRuntime.lua
				Same but from the server side
			
			MPUtil.lua
				Wrapper for the BeamMP mod. Does checks and provides compatibility functions.
			
			PauseTimer.lua
				A compatibility library that makes the hptimer()/HighPerfTimer() interface available in the beammp server. Wraps around either hptimer()/HighPerfTimer() or MP.CreateTimer()
				When a library imports this it will be able to use stop()/stopAndReset()/start() no matter if in the games environment or a beammp server
				
			ServerConfig.lua
				Provides a getter method for settings when the used server version doesnt have MP.Get() available
				
			Settings.lua
				A settings lib providing describtive and self patching settings. WIP
				
			toml.lua
				A non standard and completly outdated toml encoder and decoder
				
			TriggerClientEvent.lua
				A better MP.TriggerClientEvent class
				
		/powerups/*
			Directory containing the powerup sets. If "open" is loaded into the powerups library it will consider all groups/powerups of that set
			
			/open/*
				The current default powerup set that is auto loaded if a map has a locations prefab available.
				
				Every .lua file in this folder represents a group of powerups. The folders the powerups of each group.
			
			/tutorial/*
				The tutorial powerup set ment to teach how to make powerups

		/prefabs/*
			Directory containing location prefabs.
			if the level name matches a prefab name then its autoloaded.
			eg. "smallgrid.prefab.json" will be loaded on the "smallgrid" map

/lua/vehicle/extensions/auto/*
	PowerUpExtender.lua
		Provides extra ve utility.
	
	SoundsLib.lua
		Company lua for the Sounds lib from /lua/ge/extensions/libs/Sounds.lua
		Loading/storing/playing of sounds.. at vehicle locations
	
	/extender/*
		Bridge.lua
			Work in progress. Will make it possible to make VE data available in GE.
				eg
				in a powerup definition
				local M = {
					-- [...]
					
					mass_bridge = Bridge("vehicle_mass", [[
						local total_vehicle_mass = 0
						-- calc vehicle mass
						
						return total_vehicle_mass
					]])
				}
				
				-- in any function of that powerup
				local mass = M.mass_bridge:get() or 0
